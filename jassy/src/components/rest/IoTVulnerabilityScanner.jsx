import React, { useState } from 'react';

const IoTVulnerabilityScanner = () => {
  const [isScanning, setIsScanning] = useState(false);
  const [exportStatus, setExportStatus] = useState('Export Report (PDF)');
  const [progress, setProgress] = useState(0);
  const [showResults, setShowResults] = useState(false);
  const [showStats, setShowStats] = useState(false);

  // Sample device data
  const devices = [
    {
      name: 'Smart Security Camera (Model XC-200)',
      ip: '192.168.1.105',
      vulnerabilities: [
        {
          desc: 'Default credentials (admin:admin)',
          risk: 'critical',
          explanation: 'Many IoT devices ship with default usernames/passwords that are publicly documented. Attackers can use these to gain full control of the device.',
        },
        {
          desc: 'Unencrypted video streaming',
          risk: 'high',
          explanation: 'The camera transmits video feeds without encryption, allowing anyone on the network to potentially intercept sensitive footage.',
        },
        {
          desc: 'Firmware v2.1.5 (latest is v3.0.2)',
          risk: 'medium',
          explanation: 'Outdated firmware often contains known vulnerabilities that have been patched in newer versions.',
        },
        {
          desc: 'Open port: 23 (Telnet)',
          risk: 'critical',
          explanation: 'Telnet is an insecure protocol that transmits data in plaintext. An open Telnet port suggests the device may have a backdoor.',
        },
      ],
      remediation: '1. Change default credentials immediately\n2. Enable encryption in camera settings\n3. Update firmware from manufacturer\'s website\n4. Disable Telnet access in device configuration',
    },
    {
      name: 'Smart Thermostat (Nest Gen 3)',
      ip: '192.168.1.112',
      vulnerabilities: [
        {
          desc: 'Weak Wi-Fi password (WPA2-PSK)',
          risk: 'medium',
          explanation: 'Weak Wi-Fi passwords can be brute-forced, giving attackers access to your home network and all connected devices.',
        },
        {
          desc: 'Outdated API (v1.2)',
          risk: 'medium',
          explanation: 'Older API versions may have security flaws that were fixed in later updates. This could allow unauthorized access to device controls.',
        },
      ],
      remediation: '1. Strengthen Wi-Fi password to at least 12 characters\n2. Check for firmware updates in the Nest app\n3. Consider creating a separate IoT network',
    },
    {
      name: 'Wi-Fi Smart Plug (TP-Link HS100)',
      ip: '192.168.1.120',
      vulnerabilities: [
        {
          desc: 'No firmware updates since 2020',
          risk: 'high',
          explanation: 'Lack of updates suggests the device may be abandoned by the manufacturer, leaving known vulnerabilities unpatched.',
        },
        {
          desc: 'Vulnerable to power cycling attacks',
          risk: 'medium',
          explanation: 'Some smart plugs can be forced to reset by rapidly turning power on/off, potentially allowing unauthorized access.',
        },
      ],
      remediation: '1. Check manufacturer website for any available updates\n2. Monitor for unusual power cycling\n3. Consider replacing with a newer, supported model',
    },
    {
      name: 'Amazon Echo Dot (4th Gen)',
      ip: '192.168.1.108',
      vulnerabilities: [
        {
          desc: 'Microphone always listening',
          risk: 'low',
          explanation: 'While this is by design for voice assistants, it raises privacy concerns about accidental recordings or unauthorized access.',
        },
        {
          desc: 'Cloud-dependent functionality',
          risk: 'medium',
          explanation: 'If Amazon\'s servers are compromised or unavailable, the device may become unresponsive or leak data.',
        },
      ],
      remediation: '1. Review privacy settings in Alexa app\n2. Use mute button when not in use\n3. Regularly review voice recording history',
    },
    {
      name: 'Unknown IoT Device',
      ip: '192.168.1.115',
      vulnerabilities: [
        {
          desc: 'No manufacturer identification',
          risk: 'high',
          explanation: 'Unidentified devices on your network could be anything from forgotten smart gadgets to malicious implants.',
        },
        {
          desc: 'Responds to ping but no open ports',
          risk: 'low',
          explanation: 'While not immediately dangerous, this behavior is suspicious and warrants investigation.',
        },
      ],
      remediation: '1. Trace physical connection to identify device\n2. Check router\'s connected devices list\n3. If unidentifiable, disconnect and monitor network traffic',
    },
  ];

  // Calculate stats
  const stats = devices.reduce(
    (acc, device) => {
      device.vulnerabilities.forEach((vuln) => {
        if (vuln.risk === 'critical') acc.criticalCount++;
        if (vuln.risk === 'high') acc.highCount++;
        acc.totalVulns++;
      });
      return acc;
    },
    { devicesFound: devices.length, criticalCount: 0, highCount: 0, totalVulns: 0 }
  );

  const startScan = () => {
    setIsScanning(true);
    setProgress(0);
    setShowResults(false);
    setShowStats(false);

    const interval = setInterval(() => {
      setProgress((prev) => {
        const newProgress = prev + Math.random() * 10;
        if (newProgress >= 100) {
          clearInterval(interval);
          setIsScanning(false);
          setShowResults(true);
          setShowStats(true);
          return 100;
        }
        return newProgress;
      });
    }, 300);
  };

  const handleExport = () => {
    setExportStatus('Generating PDF...');
    setTimeout(() => {
      setExportStatus('Report Exported (Simulated)');
      setTimeout(() => {
        setExportStatus('Export Report (PDF)');
      }, 2000);
    }, 1500);
  };

  return (
    <div className="iot-vuln-scanner-container">
      <style jsx>{`
        :root {
          --bg-dark: #0a0a0a;
          --bg-darker: #050505;
          --panel-dark: #1a1a1a;
          --panel-light: #2a2a2a;
          --accent-yellow: #ffcc00;
          --accent-red: #ff4444;
          --accent-orange: #ff9900;
          --accent-green: #44cc44;
          --text-light: #f0f0f0;
          --text-dim: #aaaaaa;
        }

        .iot-vuln-scanner-container {
          font-family: 'Consolas', 'Courier New', monospace;
          background-color: var(--bg-dark);
          color: var(--text-light);
          margin: 0;
          padding: 20px;
          line-height: 1.6;
          max-width: 1200px;
          margin-left: auto;
          margin-right: auto;
        }

        .iot-vuln-scanner-header {
          border-bottom: 1px solid var(--accent-yellow);
          padding-bottom: 10px;
          margin-bottom: 20px;
        }

        .iot-vuln-scanner-title {
          color: var(--accent-yellow);
          margin: 0;
          font-size: 2.2rem;
        }

        .iot-vuln-scanner-subtitle {
          color: var(--text-dim);
          font-size: 0.9rem;
          margin-top: 5px;
        }

        .iot-vuln-scanner-info-box {
          background-color: var(--panel-dark);
          border-left: 4px solid var(--accent-yellow);
          padding: 15px;
          margin-bottom: 20px;
        }

        .iot-vuln-scanner-info-title {
          margin-top: 0;
          color: var(--accent-yellow);
        }

        .iot-vuln-scanner-scan-panel {
          background-color: var(--panel-dark);
          border-radius: 5px;
          padding: 20px;
          margin-bottom: 20px;
          box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
        }

        .iot-vuln-scanner-controls {
          display: flex;
          gap: 10px;
          margin-bottom: 15px;
        }

        .iot-vuln-scanner-scan-btn {
          background-color: var(--accent-yellow);
          color: #000;
          border: none;
          padding: 10px 20px;
          font-weight: bold;
          border-radius: 4px;
          cursor: pointer;
          transition: all 0.2s;
        }

        .iot-vuln-scanner-scan-btn:hover {
          background-color: #e6b800;
        }

        .iot-vuln-scanner-scan-btn:disabled {
          opacity: 0.7;
          cursor: not-allowed;
        }

        .iot-vuln-scanner-export-btn {
          background-color: var(--panel-light);
          color: var(--text-light);
          border: 1px solid var(--accent-yellow);
          padding: 10px 15px;
          border-radius: 4px;
          cursor: pointer;
          transition: all 0.2s;
        }

        .iot-vuln-scanner-export-btn:hover {
          background-color: rgba(255, 204, 0, 0.1);
        }

        .iot-vuln-scanner-progress {
          height: 4px;
          background-color: var(--panel-light);
          border-radius: 2px;
          margin-top: 10px;
          overflow: hidden;
          display: ${isScanning ? 'block' : 'none'};
        }

        .iot-vuln-scanner-progress-bar {
          height: 100%;
          width: ${progress}%;
          background-color: var(--accent-yellow);
          transition: width 0.3s;
        }

        .iot-vuln-scanner-results {
          display: ${showResults ? 'block' : 'none'};
        }

        .iot-vuln-scanner-device-card {
          background-color: var(--panel-dark);
          border-radius: 5px;
          padding: 15px;
          margin-bottom: 15px;
          border-left: 4px solid var(--panel-light);
          transition: all 0.2s;
        }

        .iot-vuln-scanner-device-card:hover {
          border-left-color: var(--accent-yellow);
          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

        .iot-vuln-scanner-device-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 10px;
        }

        .iot-vuln-scanner-device-name {
          font-weight: bold;
          color: var(--accent-yellow);
          font-size: 1.1rem;
        }

        .iot-vuln-scanner-device-ip {
          color: var(--text-dim);
          font-family: monospace;
          font-size: 0.9rem;
        }

        .iot-vuln-scanner-vulnerability-list {
          margin-top: 10px;
        }

        .iot-vuln-scanner-vulnerability {
          margin-bottom: 8px;
          padding-left: 15px;
          position: relative;
        }

        .iot-vuln-scanner-vulnerability:before {
          content: '•';
          position: absolute;
          left: 0;
          color: var(--accent-red);
        }

        .iot-vuln-scanner-risk-tag {
          display: inline-block;
          padding: 2px 8px;
          border-radius: 3px;
          font-size: 0.8rem;
          font-weight: bold;
          margin-left: 5px;
        }

        .iot-vuln-scanner-risk-critical {
          background-color: var(--accent-red);
          color: white;
          animation: pulse 1.5s infinite;
        }

        .iot-vuln-scanner-risk-high {
          background-color: var(--accent-red);
          color: white;
        }

        .iot-vuln-scanner-risk-medium {
          background-color: var(--accent-orange);
          color: black;
        }

        .iot-vuln-scanner-risk-low {
          background-color: var(--accent-green);
          color: black;
        }

        .iot-vuln-scanner-explanation {
          font-size: 0.85rem;
          color: var(--text-dim);
          margin: 5px 0 10px 15px;
          padding-left: 10px;
          border-left: 2px solid #333;
        }

        .iot-vuln-scanner-remediation {
          margin-top: 10px;
          padding: 10px;
          background-color: rgba(255, 204, 0, 0.1);
          border-left: 3px solid var(--accent-yellow);
          font-size: 0.9rem;
        }

        .iot-vuln-scanner-stats-panel {
          background-color: var(--panel-dark);
          border-radius: 5px;
          padding: 15px;
          margin-bottom: 20px;
          display: ${showStats ? 'flex' : 'none'};
          justify-content: space-between;
          flex-wrap: wrap;
        }

        .iot-vuln-scanner-stat-item {
          text-align: center;
          padding: 10px;
          min-width: 100px;
        }

        .iot-vuln-scanner-stat-value {
          font-size: 1.5rem;
          font-weight: bold;
          color: var(--accent-yellow);
        }

        .iot-vuln-scanner-stat-label {
          font-size: 0.8rem;
          color: var(--text-dim);
        }

        .iot-vuln-scanner-footer {
          text-align: center;
          margin-top: 40px;
          padding-top: 20px;
          border-top: 1px solid #333;
          color: var(--text-dim);
          font-size: 0.8rem;
        }

        @keyframes pulse {
          0% { opacity: 1; }
          50% { opacity: 0.7; }
          100% { opacity: 1; }
        }
      `}</style>

      <header className="iot-vuln-scanner-header">
        <h1 className="iot-vuln-scanner-title">IoT Vulnerability Scanner</h1>
        <p className="iot-vuln-scanner-subtitle">Educational Simulation - No Actual Scanning Performed</p>
      </header>

      <div className="iot-vuln-scanner-info-box">
        <h3 className="iot-vuln-scanner-info-title">About This Simulation</h3>
        <p>
          In real-world scenarios, security professionals use tools like <strong>Nmap</strong>, <strong>Shodan</strong>, <strong>Nessus</strong>, or <strong>OpenVAS</strong> to scan for IoT vulnerabilities. This simulation demonstrates what such a scan might reveal about common IoT security issues.
        </p>
        <p>
          <strong>Educational Purpose:</strong> This tool helps you recognize common IoT security flaws and understand how to mitigate them. No actual network scanning occurs.
        </p>
      </div>

      <div className="iot-vuln-scanner-scan-panel">
        <div className="iot-vuln-scanner-controls">
          <button
            className="iot-vuln-scanner-scan-btn"
            onClick={startScan}
            disabled={isScanning}
          >
            {isScanning ? 'Scanning Network...' : showResults ? 'Scan Complete' : 'Start Simulated Scan'}
          </button>
          <button
            className="iot-vuln-scanner-export-btn"
            onClick={handleExport}
            disabled={!showResults}
          >
            {exportStatus}
          </button>
        </div>
        <div className="iot-vuln-scanner-progress">
          <div className="iot-vuln-scanner-progress-bar"></div>
        </div>
      </div>

      <div className="iot-vuln-scanner-stats-panel">
        <div className="iot-vuln-scanner-stat-item">
          <div className="iot-vuln-scanner-stat-value">{stats.devicesFound}</div>
          <div className="iot-vuln-scanner-stat-label">Devices Found</div>
        </div>
        <div className="iot-vuln-scanner-stat-item">
          <div className="iot-vuln-scanner-stat-value">{stats.criticalCount}</div>
          <div className="iot-vuln-scanner-stat-label">Critical Risks</div>
        </div>
        <div className="iot-vuln-scanner-stat-item">
          <div className="iot-vuln-scanner-stat-value">{stats.highCount}</div>
          <div className="iot-vuln-scanner-stat-label">High Risks</div>
        </div>
        <div className="iot-vuln-scanner-stat-item">
          <div className="iot-vuln-scanner-stat-value">{stats.totalVulns}</div>
          <div className="iot-vuln-scanner-stat-label">Total Vulnerabilities</div>
        </div>
      </div>

      <div className="iot-vuln-scanner-results">
        <h2>Simulated Scan Results</h2>
        <div>
          {devices.map((device, index) => (
            <div key={index} className="iot-vuln-scanner-device-card">
              <div className="iot-vuln-scanner-device-header">
                <div className="iot-vuln-scanner-device-name">{device.name}</div>
                <div className="iot-vuln-scanner-device-ip">{device.ip}</div>
              </div>
              <div className="iot-vuln-scanner-vulnerability-list">
                {device.vulnerabilities.map((vuln, vulnIndex) => (
                  <div key={vulnIndex}>
                    <div className="iot-vuln-scanner-vulnerability">
                      {vuln.desc}
                      <span className={`iot-vuln-scanner-risk-tag iot-vuln-scanner-risk-${vuln.risk}`}>
                        {vuln.risk.toUpperCase()}
                      </span>
                    </div>
                    <div className="iot-vuln-scanner-explanation">{vuln.explanation}</div>
                  </div>
                ))}
              </div>
              <div className="iot-vuln-scanner-remediation">
                <strong>Recommended Actions:</strong>
                <br />
                <div
                  dangerouslySetInnerHTML={{
                    __html: device.remediation.replace(/\n/g, '<br />'),
                  }}
                />
              </div>
            </div>
          ))}
        </div>
      </div>

      <footer className="iot-vuln-scanner-footer">
        <p>This is an educational simulation only. No actual network scanning is performed.</p>
      </footer>
    </div>
  );
};

export default IoTVulnerabilityScanner;